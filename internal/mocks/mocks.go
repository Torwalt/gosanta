// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	awards "gosanta/internal"
	ports "gosanta/internal/ports"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAwardReadRepository is a mock of AwardReadRepository interface.
type MockAwardReadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAwardReadRepositoryMockRecorder
}

// MockAwardReadRepositoryMockRecorder is the mock recorder for MockAwardReadRepository.
type MockAwardReadRepositoryMockRecorder struct {
	mock *MockAwardReadRepository
}

// NewMockAwardReadRepository creates a new mock instance.
func NewMockAwardReadRepository(ctrl *gomock.Controller) *MockAwardReadRepository {
	mock := &MockAwardReadRepository{ctrl: ctrl}
	mock.recorder = &MockAwardReadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwardReadRepository) EXPECT() *MockAwardReadRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAwardReadRepository) Get(id int64) (*awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAwardReadRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAwardReadRepository)(nil).Get), id)
}

// GetByUserId mocks base method.
func (m *MockAwardReadRepository) GetByUserId(id awards.UserId) ([]awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", id)
	ret0, _ := ret[0].([]awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockAwardReadRepositoryMockRecorder) GetByUserId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockAwardReadRepository)(nil).GetByUserId), id)
}

// MockAwardRepository is a mock of AwardRepository interface.
type MockAwardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAwardRepositoryMockRecorder
}

// MockAwardRepositoryMockRecorder is the mock recorder for MockAwardRepository.
type MockAwardRepositoryMockRecorder struct {
	mock *MockAwardRepository
}

// NewMockAwardRepository creates a new mock instance.
func NewMockAwardRepository(ctrl *gomock.Controller) *MockAwardRepository {
	mock := &MockAwardRepository{ctrl: ctrl}
	mock.recorder = &MockAwardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwardRepository) EXPECT() *MockAwardRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAwardRepository) Add(a *awards.PhishingAward) (*awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", a)
	ret0, _ := ret[0].(*awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAwardRepositoryMockRecorder) Add(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAwardRepository)(nil).Add), a)
}

// Delete mocks base method.
func (m *MockAwardRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAwardRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAwardRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockAwardRepository) Get(id int64) (*awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAwardRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAwardRepository)(nil).Get), id)
}

// GetByUserId mocks base method.
func (m *MockAwardRepository) GetByUserId(id awards.UserId) ([]awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", id)
	ret0, _ := ret[0].([]awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockAwardRepositoryMockRecorder) GetByUserId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockAwardRepository)(nil).GetByUserId), id)
}

// MockUserReadRepository is a mock of UserReadRepository interface.
type MockUserReadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserReadRepositoryMockRecorder
}

// MockUserReadRepositoryMockRecorder is the mock recorder for MockUserReadRepository.
type MockUserReadRepositoryMockRecorder struct {
	mock *MockUserReadRepository
}

// NewMockUserReadRepository creates a new mock instance.
func NewMockUserReadRepository(ctrl *gomock.Controller) *MockUserReadRepository {
	mock := &MockUserReadRepository{ctrl: ctrl}
	mock.recorder = &MockUserReadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReadRepository) EXPECT() *MockUserReadRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserReadRepository) Get(uId awards.UserId) (*awards.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uId)
	ret0, _ := ret[0].(*awards.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserReadRepositoryMockRecorder) Get(uId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserReadRepository)(nil).Get), uId)
}

// MockAwardAssigningService is a mock of AwardAssigningService interface.
type MockAwardAssigningService struct {
	ctrl     *gomock.Controller
	recorder *MockAwardAssigningServiceMockRecorder
}

// MockAwardAssigningServiceMockRecorder is the mock recorder for MockAwardAssigningService.
type MockAwardAssigningServiceMockRecorder struct {
	mock *MockAwardAssigningService
}

// NewMockAwardAssigningService creates a new mock instance.
func NewMockAwardAssigningService(ctrl *gomock.Controller) *MockAwardAssigningService {
	mock := &MockAwardAssigningService{ctrl: ctrl}
	mock.recorder = &MockAwardAssigningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwardAssigningService) EXPECT() *MockAwardAssigningServiceMockRecorder {
	return m.recorder
}

// AssignPhishingAward mocks base method.
func (m *MockAwardAssigningService) AssignPhishingAward(cpa *ports.CreatePhishingAward) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignPhishingAward", cpa)
}

// AssignPhishingAward indicates an expected call of AssignPhishingAward.
func (mr *MockAwardAssigningServiceMockRecorder) AssignPhishingAward(cpa interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPhishingAward", reflect.TypeOf((*MockAwardAssigningService)(nil).AssignPhishingAward), cpa)
}

// MockAwardReadingService is a mock of AwardReadingService interface.
type MockAwardReadingService struct {
	ctrl     *gomock.Controller
	recorder *MockAwardReadingServiceMockRecorder
}

// MockAwardReadingServiceMockRecorder is the mock recorder for MockAwardReadingService.
type MockAwardReadingServiceMockRecorder struct {
	mock *MockAwardReadingService
}

// NewMockAwardReadingService creates a new mock instance.
func NewMockAwardReadingService(ctrl *gomock.Controller) *MockAwardReadingService {
	mock := &MockAwardReadingService{ctrl: ctrl}
	mock.recorder = &MockAwardReadingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwardReadingService) EXPECT() *MockAwardReadingServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAwardReadingService) Get(id string) (awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAwardReadingServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAwardReadingService)(nil).Get), id)
}

// GetCompanyAwards mocks base method.
func (m *MockAwardReadingService) GetCompanyAwards(cId awards.CompanyId) ([]awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyAwards", cId)
	ret0, _ := ret[0].([]awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyAwards indicates an expected call of GetCompanyAwards.
func (mr *MockAwardReadingServiceMockRecorder) GetCompanyAwards(cId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyAwards", reflect.TypeOf((*MockAwardReadingService)(nil).GetCompanyAwards), cId)
}

// GetUserAwards mocks base method.
func (m *MockAwardReadingService) GetUserAwards(uId awards.UserId) ([]awards.PhishingAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAwards", uId)
	ret0, _ := ret[0].([]awards.PhishingAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAwards indicates an expected call of GetUserAwards.
func (mr *MockAwardReadingServiceMockRecorder) GetUserAwards(uId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAwards", reflect.TypeOf((*MockAwardReadingService)(nil).GetUserAwards), uId)
}
